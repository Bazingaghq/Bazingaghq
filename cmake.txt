示例1：
PROJECT (HELLO)
SET(SRC_LIST main.c)
MESSAGE(STATUS "This is BINARY dir " ${HELLO_BINARY_DIR})
MESSAGE(STATUS "This is SOURCE dir "${HELLO_SOURCE_DIR})
ADD_EXECUTABLE(hello ${SRC_LIST})

project指令的语法：
	project(projectname [CXX] [C] [Java])
	该命令可以指定工程名，也可以指定工程支持的语言（可忽略）。
	这个命令还隐式的定义了两个cmake变量：
	<projectname>_BINARY_DIR 以及<projectname>_SOURCE_DIR，这里就是
	HELLO_BINARY_DIR 和 HELLO_SOURCE_DIR(所以 CMakeLists.txt 中两个 MESSAGE
	指令可以直接使用了这两个变量)，因为采用的是内部编译，两个变量目前指的都是工程所
	在路径/backup/cmake/t1，后面我们会讲到外部编译，两者所指代的内容会有所不同。
	同时 cmake 系统也帮助我们预定义了 PROJECT_BINARY_DIR 和 PROJECT_SOURCE_DIR
	变量，他们的值分别跟 HELLO_BINARY_DIR 与 HELLO_SOURCE_DIR 一致。
	为了统一起见，建议以后直接使用 PROJECT_BINARY_DIR，PROJECT_SOURCE_DIR，即
	使修改了工程名称，也不会影响这两个变量。如果使用了
	<projectname>_SOURCE_DIR，修改工程名称后，需要同时修改这些变量。
	
set 指令的语法是：
	SET(VAR [VALUE] [CACHE TYPE DOCSTRING [FORCE]])
	现阶段，你只需要了解 SET 指令可以用来显式的定义变量即可。
	比如我们用到的是 SET(SRC_LIST main.c)，如果有多个源文件，也可以定义成：
	SET(SRC_LIST main.c t1.c t2.c)。
	
MESSAGE 指令的语法是：
	MESSAGE([SEND_ERROR | STATUS | FATAL_ERROR] "message to display"
	...)
	这个指令用于向终端输出用户定义的信息，包含了三种类型:
	SEND_ERROR，产生错误，生成过程被跳过。
	SATUS，输出前缀为—的信息。
	FATAL_ERROR，立即终止所有 cmake 过程.
	我们在这里使用的是 STATUS 信息输出，演示了由 PROJECT 指令定义的两个隐式变量
	HELLO_BINARY_DIR 和 HELLO_SOURCE_DIR。

ADD_EXECUTABLE(hello ${SRC_LIST})
	定义了这个工程会生成一个文件名为 hello 的可执行文件，相关的源文件是 SRC_LIST 中
	定义的源文件列表， 本例中你也可以直接写成 ADD_EXECUTABLE(hello main.c)。
	在本例我们使用了${}来引用变量，这是 cmake 的变量应用方式，但是，有一些例外，比
	如在 IF 控制语句，变量是直接使用变量名引用，而不需要${}。如果使用了${}去应用变
	量，其实 IF 会去判断名为${}所代表的值的变量，那当然是不存在的了。
	
	
基本语法：	
	1，变量使用${}方式取值，但是在 IF 控制语句中是直接使用变量名
	2，指令(参数 1 参数 2...)
		参数使用括弧括起，参数之间使用空格或分号分开。
	3，指令是大小写无关的，参数和变量是大小写相关的。但，推荐你全部使用大写指令。
	注意：
		1、cmake 的语法还是比较灵活而且考虑到各种情况
			比如：SET(SRC_LIST main.c)也可以写成 SET(SRC_LIST “main.c”)，但当文件
			名中有空格时就必须加双引号
		2、可以可以忽略掉 source 列表中的源文件后缀
			比如：可以写成ADD_EXECUTABLE(t1 main)，cmake 会自动的在本目录查找
			main.c 或者 main.cpp等，当然，最好不要偷这个懒，以免这个目录确
			实存在一个 main.c 一个 main.
		3、时参数也可以使用分号来进行分割
			比如：ADD_EXECUTABLE(t1 main.c t1.c)可以写成 ADD_EXECUTABLE(t1 main.c;t1.c).

	4、清理工程
		make clean
		cmake不支持make distclean（清除中间文件）
			原因是：CMakeLists.txt 可以执行脚本并通过脚本生成一些临时文件，但是却没有办法来跟
				踪这些临时文件到底是哪些。
	
	5、内部构建和外部构建
		内部编译：会在工程目录产生很多无法自动删除的中间文件
		外部编译：在指定目录中进行构建，不影响原工程，所有动作全发生在构建目录
			PROJECT_BINARY_DIR：编译路径
			PROJECT_SOURCE_DIR：工程路径

	6、向当前工程添加存放源文件的子目录，并可以指定中间二进制和目标二进制存放的位置。
		ADD_SUBDIRECTORY 指令
		ADD_SUBDIRECTORY(source_dir [binary_dir] [EXCLUDE_FROM_ALL])
			EXCLUDE_FROM_ALL 参数的含义是将这个目录从编译过程中排除
	
	7、换个地方保存目标二进制
		我们可以通过 SET 指令重新定义 EXECUTABLE_OUTPUT_PATH 和 LIBRARY_OUTPUT_PATH 变量
		来指定最终的目标二进制的位置(指最终生成的 hello 或者最终的共享库，不包含编译生成
		的中间文件)
			SET(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR}/bin)---可执行二进制输出路径
			SET(LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/lib)---库文件输出路径
	
静态库与动态库
	SET(LIBRARY_OUTPUT_PATH <路径>)可以用来指定一个新的位置
	生成库指令：
		ADD_LIBRARY
			 ADD_LIBRARY(libname [SHARED|STATIC|MODULE]
			 [EXCLUDE_FROM_ALL]
			 source1 source2 ... sourceN)
		你不需要写全 libhello.so，只需要填写 hello 即可，cmake 系统会自动为你生成
		libhello.X
		EXCLUDE_FROM_ALL 参数的意思是这个库不会被默认构建，除非有其他的组件依赖或者手工构建。
	类型有三种:
		SHARED，动态库
		STATIC，静态库
		MODULE，在使用 dyld 的系统有效，如果不支持 dyld，则被当作 SHARED 对待。
		
	
	
	
	
	
	
	
	
	
	
	
	